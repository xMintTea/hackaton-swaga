// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    // if (!auth.isLoggedIn()) {
    //     window.location.href = 'index.html';
    //     return;
    // }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    loadProfileData();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    initEventHandlers();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
async function loadProfileData() {
    try {
        const token = auth.getToken();
        const response = await fetch(`${API_BASE_URL}/profile`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        if (response.ok) {
            const profileData = await response.json();
            updateProfileUI(profileData);
        } else {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
            const profileData = getStubProfileData();
            updateProfileUI(profileData);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:', error);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        const profileData = getStubProfileData();
        updateProfileUI(profileData);
    }
}

// –ó–∞–≥–ª—É—à–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
function getStubProfileData() {
    return {
        username: 'Neo_Matrix',
        title: '–ù–æ–≤–∏—á–æ–∫ –≤ –∫–∏–±–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ',
        level: 5,
        xp: 650,
        nextLevelXp: 1000,
        currency: 1250,
        description: '–ò–∑—É—á–∞—é Python –∏ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å. –ú–µ—á—Ç–∞—é —Å—Ç–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.',
        socialLinks: [
            { type: 'youtube', url: 'youtube.com/user/neo_matrix' },
            { type: 'github', url: 'github.com/neo_matrix' }
        ],
        courses: {
            current: [
                { name: 'Python Basics', progress: 65 }
            ],
            completed: []
        },
        achievements: [
            { id: 1, name: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏', description: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ', icon: '‚≠ê' },
            { id: 2, name: '–ù–∞—á–∞–ª–æ –ø—É—Ç–∏', description: '–ó–∞–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—ã–π –º–æ–¥—É–ª—å –∫—É—Ä—Å–∞', icon: 'üìö' }
        ],
        inventory: {
            avatars: [1],
            frames: [1],
            titles: [1]
        },
        shop: {
            avatars: [
                { id: 1, name: '–ë–∞–∑–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä', price: 0, owned: true },
                { id: 2, name: '–ö–∏–±–µ—Ä-–∞–≤–∞—Ç–∞—Ä', price: 500, owned: false },
                { id: 3, name: '–•–∞–∫–µ—Ä—Å–∫–∏–π –∞–≤–∞—Ç–∞—Ä', price: 750, owned: false }
            ],
            frames: [
                { id: 1, name: '–ë–∞–∑–æ–≤–∞—è —Ä–∞–º–∫–∞', price: 0, owned: true },
                { id: 2, name: '–ó–æ–ª–æ—Ç–∞—è —Ä–∞–º–∫–∞', price: 1200, owned: false }
            ],
            titles: [
                { id: 1, name: '–ù–æ–≤–∏—á–æ–∫ –≤ –∫–∏–±–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ', price: 0, owned: true },
                { id: 2, name: '–ö–∏–±–µ—Ä-–ø–∏–æ–Ω–µ—Ä', price: 800, owned: false }
            ]
        }
    };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è
function updateProfileUI(data) {
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    document.getElementById('username').textContent = data.username;
    document.getElementById('userTitle').textContent = data.title;
    document.getElementById('userLevel').textContent = data.level;
    document.getElementById('currentXP').textContent = data.xp;
    document.getElementById('nextLevelXP').textContent = data.nextLevelXp;
    document.getElementById('userCurrency').textContent = data.currency;
    document.getElementById('shopCurrency').textContent = data.currency;
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    const progressPercentage = (data.xp / data.nextLevelXp) * 100;
    document.getElementById('progressFill').style.width = `${progressPercentage}%`;
    
    // –û–ø–∏—Å–∞–Ω–∏–µ
    document.getElementById('userDescription').textContent = data.description;
    document.getElementById('descriptionInput').value = data.description;
    
    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    updateSocialLinks(data.socialLinks);
    
    // –ö—É—Ä—Å—ã
    updateCourses(data.courses);
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    updateAchievements(data.achievements);
    
    // –ú–∞–≥–∞–∑–∏–Ω
    updateShop(data.shop);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
function updateSocialLinks(socialLinks) {
    const socialLinksContainer = document.getElementById('socialLinks');
    socialLinksContainer.innerHTML = '';
    
    socialLinks.forEach(link => {
        const linkElement = document.createElement('div');
        linkElement.className = 'social-link-item';
        
        let icon = 'üîó';
        if (link.type === 'youtube') icon = 'üì∫';
        else if (link.type === 'github') icon = 'üêô';
        else if (link.type === 'telegram') icon = 'üì®';
        else if (link.type === 'vk') icon = 'üë•';
        
        linkElement.innerHTML = `
            <span class="social-icon">${icon}</span>
            <span class="social-url">${link.url}</span>
        `;
        
        socialLinksContainer.appendChild(linkElement);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
function updateCourses(courses) {
    const currentCoursesContainer = document.getElementById('currentCourses');
    const completedCoursesContainer = document.getElementById('completedCourses');
    
    // –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã
    currentCoursesContainer.innerHTML = '';
    if (courses.current.length > 0) {
        courses.current.forEach(course => {
            const courseElement = document.createElement('div');
            courseElement.className = 'course-progress-item';
            
            let icon = 'üìñ';
            if (course.name.includes('Python')) icon = 'üêç';
            else if (course.name.includes('JavaScript')) icon = '‚ö°';
            else if (course.name.includes('Java')) icon = '‚òï';
            
            courseElement.innerHTML = `
                <div class="course-icon">${icon}</div>
                <div class="course-details">
                    <h3>${course.name}</h3>
                    <p>–ü—Ä–æ–≥—Ä–µ—Å—Å: ${course.progress}%</p>
                    <div class="mini-progress-bar">
                        <div class="mini-progress-fill" style="width: ${course.progress}%;"></div>
                    </div>
                </div>
            `;
            
            currentCoursesContainer.appendChild(courseElement);
        });
    } else {
        currentCoursesContainer.innerHTML = '<p>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.</p>';
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
    completedCoursesContainer.innerHTML = '';
    if (courses.completed.length > 0) {
        courses.completed.forEach(course => {
            const courseElement = document.createElement('div');
            courseElement.className = 'course-progress-item';
            
            let icon = 'üìñ';
            if (course.name.includes('Python')) icon = 'üêç';
            else if (course.name.includes('JavaScript')) icon = '‚ö°';
            else if (course.name.includes('Java')) icon = '‚òï';
            
            courseElement.innerHTML = `
                <div class="course-icon">${icon}</div>
                <div class="course-details">
                    <h3>${course.name}</h3>
                    <p>–ó–∞–≤–µ—Ä—à–µ–Ω–æ: 100%</p>
                    <div class="mini-progress-bar">
                        <div class="mini-progress-fill" style="width: 100%;"></div>
                    </div>
                </div>
            `;
            
            completedCoursesContainer.appendChild(courseElement);
        });
    } else {
        completedCoursesContainer.innerHTML = '<p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.</p>';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function updateAchievements(achievements) {
    const achievementsContainer = document.querySelector('.achievements-grid');
    achievementsContainer.innerHTML = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 6 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ—Ñ–∏–ª—è
    const displayedAchievements = achievements.slice(0, 6);
    
    displayedAchievements.forEach(achievement => {
        const achievementElement = document.createElement('div');
        achievementElement.className = 'achievement-item';
        
        achievementElement.innerHTML = `
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-info">
                <h4>${achievement.name}</h4>
                <p>${achievement.description}</p>
            </div>
        `;
        
        achievementsContainer.appendChild(achievementElement);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (displayedAchievements.length < 6) {
        for (let i = displayedAchievements.length; i < 6; i++) {
            const lockedAchievement = document.createElement('div');
            lockedAchievement.className = 'achievement-item locked';
            
            lockedAchievement.innerHTML = `
                <div class="achievement-icon">üîí</div>
                <div class="achievement-info">
                    <h4>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ</h4>
                    <p>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∏—Ç—å—Å—è, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å</p>
                </div>
            `;
            
            achievementsContainer.appendChild(lockedAchievement);
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
function updateShop(shop) {
    // –ê–≤–∞—Ç–∞—Ä—ã
    const avatarsContainer = document.getElementById('shopAvatars');
    avatarsContainer.innerHTML = '';
    
    shop.avatars.forEach(avatar => {
        const avatarElement = createShopItem(avatar, 'avatar');
        avatarsContainer.appendChild(avatarElement);
    });
    
    // –†–∞–º–∫–∏
    const framesContainer = document.getElementById('shopFrames');
    framesContainer.innerHTML = '';
    
    shop.frames.forEach(frame => {
        const frameElement = createShopItem(frame, 'frame');
        framesContainer.appendChild(frameElement);
    });
    
    // –¢–∏—Ç—É–ª—ã
    const titlesContainer = document.getElementById('shopTitles');
    titlesContainer.innerHTML = '';
    
    shop.titles.forEach(title => {
        const titleElement = createShopItem(title, 'title');
        titlesContainer.appendChild(titleElement);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–∞
function createShopItem(item, type) {
    const itemElement = document.createElement('div');
    itemElement.className = `shop-item ${item.owned ? 'owned' : ''}`;
    
    let iconHtml = '';
    if (type === 'avatar') {
        iconHtml = `<img src="img/avatars/avatar${item.id}.png" alt="${item.name}">`;
    } else if (type === 'frame') {
        iconHtml = `
            <div class="${item.id === 2 ? 'premium-frame' : 'basic-frame'}">
                <img src="img/avatars/avatar1.png" alt="${item.name}">
            </div>
        `;
    } else {
        iconHtml = '<div class="item-icon">üè∑Ô∏è</div>';
    }
    
    itemElement.innerHTML = `
        <div class="item-icon">
            ${iconHtml}
        </div>
        <div class="item-info">
            <h4>${item.name}</h4>
            ${item.owned ? '<p>–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç</p>' : `
                <div class="item-price">
                    <span class="currency-icon">‚ìí</span>
                    <span>${item.price}</span>
                </div>
            `}
        </div>
        ${!item.owned ? `<button class="btn btn-small" data-item-id="${item.id}" data-item-type="${type}">–ö—É–ø–∏—Ç—å</button>` : ''}
    `;
    
    return itemElement;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initEventHandlers() {
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    const editDescriptionBtn = document.getElementById('editDescriptionBtn');
    const saveDescriptionBtn = document.getElementById('saveDescriptionBtn');
    const cancelDescriptionBtn = document.getElementById('cancelDescriptionBtn');
    const descriptionForm = document.getElementById('editDescriptionForm');
    const descriptionText = document.getElementById('userDescription');
    
    if (editDescriptionBtn) {
        editDescriptionBtn.addEventListener('click', function() {
            descriptionForm.style.display = 'block';
            descriptionText.style.display = 'none';
            this.style.display = 'none';
        });
    }
    
    if (saveDescriptionBtn) {
        saveDescriptionBtn.addEventListener('click', function() {
            const newDescription = document.getElementById('descriptionInput').value;
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
            descriptionText.textContent = newDescription;
            descriptionForm.style.display = 'none';
            descriptionText.style.display = 'block';
            editDescriptionBtn.style.display = 'block';
            
            // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            showNotification('–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ', 'success');
        });
    }
    
    if (cancelDescriptionBtn) {
        cancelDescriptionBtn.addEventListener('click', function() {
            descriptionForm.style.display = 'none';
            descriptionText.style.display = 'block';
            editDescriptionBtn.style.display = 'block';
        });
    }
    
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    const editSocialsBtn = document.getElementById('editSocialsBtn');
    const saveSocialsBtn = document.getElementById('saveSocialsBtn');
    const cancelSocialsBtn = document.getElementById('cancelSocialsBtn');
    const socialsForm = document.getElementById('editSocialsForm');
    const socialsList = document.getElementById('socialLinks');
    const addSocialBtn = document.getElementById('addSocialBtn');
    
    if (editSocialsBtn) {
        editSocialsBtn.addEventListener('click', function() {
            socialsForm.style.display = 'block';
            socialsList.style.display = 'none';
            this.style.display = 'none';
        });
    }
    
    if (addSocialBtn) {
        addSocialBtn.addEventListener('click', function() {
            const type = document.getElementById('socialTypeSelect').value;
            const url = document.getElementById('socialUrlInput').value;
            
            if (url) {
                // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
                const newLink = document.createElement('div');
                newLink.className = 'social-link-item';
                
                let icon = 'üîó';
                if (type === 'youtube') icon = 'üì∫';
                else if (type === 'github') icon = 'üêô';
                else if (type === 'telegram') icon = 'üì®';
                else if (type === 'vk') icon = 'üë•';
                
                newLink.innerHTML = `
                    <span class="social-icon">${icon}</span>
                    <span class="social-url">${url}</span>
                `;
                
                socialsList.appendChild(newLink);
                document.getElementById('socialUrlInput').value = '';
                
                showNotification('–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
            }
        });
    }
    
    if (saveSocialsBtn) {
        saveSocialsBtn.addEventListener('click', function() {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
            socialsForm.style.display = 'none';
            socialsList.style.display = 'block';
            editSocialsBtn.style.display = 'block';
            
            showNotification('–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
        });
    }
    
    if (cancelSocialsBtn) {
        cancelSocialsBtn.addEventListener('click', function() {
            socialsForm.style.display = 'none';
            socialsList.style.display = 'block';
            editSocialsBtn.style.display = 'block';
        });
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    const tabBtns = document.querySelectorAll('.tab-btn');
    tabBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            const tabName = this.getAttribute('data-tab');
            const tabContainer = this.closest('.profile-section');
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            tabContainer.querySelectorAll('.tab-btn').forEach(b => {
                b.classList.remove('active');
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
            this.classList.add('active');
            
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é
            tabContainer.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            tabContainer.querySelector(`#${this.getAttribute('data-tab') === 'current' ? 'currentCourses' : 
                                       this.getAttribute('data-tab') === 'completed' ? 'completedCourses' :
                                       `shop${this.getAttribute('data-tab').charAt(0).toUpperCase() + this.getAttribute('data-tab').slice(1)}`}`).classList.add('active');
        });
    });
    
    // –í—ã–±–æ—Ä –∞–≤–∞—Ç–∞—Ä–∞
    const changeAvatarBtn = document.getElementById('changeAvatarBtn');
    const avatarModal = document.getElementById('avatarModal');
    const closeAvatarModal = document.getElementById('closeAvatarModal');
    const confirmAvatarBtn = document.getElementById('confirmAvatarBtn');
    
    if (changeAvatarBtn) {
        changeAvatarBtn.addEventListener('click', function() {
            avatarModal.style.display = 'flex';
        });
    }
    
    if (closeAvatarModal) {
        closeAvatarModal.addEventListener('click', function() {
            avatarModal.style.display = 'none';
        });
    }
    
    if (confirmAvatarBtn) {
        confirmAvatarBtn.addEventListener('click', function() {
            const selectedAvatar = document.querySelector('.avatar-option.selected');
            if (selectedAvatar && !selectedAvatar.classList.contains('locked')) {
                // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —Å–º–µ–Ω—è –∞–≤–∞—Ç–∞—Ä–∞
                const avatarImg = selectedAvatar.querySelector('img').src;
                document.getElementById('userAvatar').src = avatarImg;
                avatarModal.style.display = 'none';
                
                showNotification('–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', 'success');
            } else {
                showNotification('–≠—Ç–æ—Ç –∞–≤–∞—Ç–∞—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'error');
            }
        });
    }
    
    // –í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –∞–≤–∞—Ç–∞—Ä–∞
    const avatarOptions = document.querySelectorAll('.avatar-option');
    avatarOptions.forEach(option => {
        option.addEventListener('click', function() {
            if (!this.classList.contains('locked')) {
                avatarOptions.forEach(o => o.classList.remove('selected'));
                this.classList.add('selected');
            }
        });
    });
    
    // –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('btn-small') && e.target.textContent === '–ö—É–ø–∏—Ç—å') {
            const itemId = e.target.getAttribute('data-item-id');
            const itemType = e.target.getAttribute('data-item-type');
            
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
            showNotification(`–ü—Ä–µ–¥–º–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω!`, 'success');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            e.target.textContent = '–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ';
            e.target.disabled = true;
            e.target.closest('.shop-item').classList.add('owned');
        }
    });
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
    const visibilityToggle = document.getElementById('profileVisibilityToggle');
    if (visibilityToggle) {
        visibilityToggle.addEventListener('change', function() {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
            showNotification(`–ü—Ä–æ—Ñ–∏–ª—å ${this.checked ? '—Å–∫—Ä—ã—Ç' : '–æ—Ç–∫—Ä—ã—Ç'}`, 'success');
        });
    }
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const viewAllAchievementsBtn = document.querySelector('[data-translate="view_all"]');
    if (viewAllAchievementsBtn) {
        viewAllAchievementsBtn.addEventListener('click', openAchievementsModal);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function openAchievementsModal() {
    const modal = document.getElementById('achievementsModal');
    modal.style.display = 'flex';
    loadAllAchievements();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
async function loadAllAchievements() {
    try {
        const token = auth.getToken();
        const response = await fetch(`${API_BASE_URL}/achievements`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        let achievements = [];
        
        if (response.ok) {
            achievements = await response.json();
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
            achievements = [
                { id: 1, name: "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏", description: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ", icon: "‚≠ê", earned: true, date: "15.04.2025" },
                { id: 2, name: "–ù–∞—á–∞–ª–æ –ø—É—Ç–∏", description: "–ó–∞–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—ã–π –º–æ–¥—É–ª—å –∫—É—Ä—Å–∞", icon: "üìö", earned: true, date: "18.04.2025" },
                { id: 3, name: "–ù–µ–¥–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", description: "–ó–∞—Ö–æ–¥–∏–ª –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥", icon: "üî•", earned: false, progress: "5/7 –¥–Ω–µ–π" },
                { id: 4, name: "–ú–∞—Å—Ç–µ—Ä Python", description: "–ó–∞–≤–µ—Ä—à–∏–ª –∫—É—Ä—Å Python Basics", icon: "üêç", earned: false, progress: "65%" },
                { id: 5, name: "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", description: "–î–æ–±–∞–≤–∏–ª 3 —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", icon: "üë•", earned: false, progress: "2/3 —Å—Å—ã–ª–æ–∫" },
                { id: 6, name: "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä", description: "–ü—Ä–∏–æ–±—Ä–µ–ª 5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", icon: "üõçÔ∏è", earned: false, progress: "1/5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤" },
                { id: 7, name: "–≠–∫—Å–ø–µ—Ä—Ç JavaScript", description: "–ó–∞–≤–µ—Ä—à–∏–ª –∫—É—Ä—Å JavaScript Fundamentals", icon: "‚ö°", earned: false },
                { id: 8, name: "–ö–∏–±–µ—Ä-–ª–µ–≥–µ–Ω–¥–∞", description: "–î–æ—Å—Ç–∏–≥ 10 —É—Ä–æ–≤–Ω—è", icon: "üèÜ", earned: false }
            ];
        }
        
        const container = document.getElementById('allAchievements');
        container.innerHTML = '';
        
        achievements.forEach(achievement => {
            const achievementElement = document.createElement('div');
            achievementElement.className = `achievement-item ${achievement.earned ? '' : 'locked'}`;
            
            achievementElement.innerHTML = `
                <div class="achievement-icon">${achievement.icon}</div>
                <div class="achievement-info">
                    <h4>${achievement.name}</h4>
                    <p>${achievement.description}</p>
                    ${achievement.earned ? 
                        `<div class="achievement-date">–ü–æ–ª—É—á–µ–Ω–æ: ${achievement.date}</div>` : 
                        achievement.progress ? 
                            `<div class="achievement-progress">–ü—Ä–æ–≥—Ä–µ—Å—Å: ${achievement.progress}</div>` :
                            `<div class="achievement-progress">–ï—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ</div>`
                    }
                </div>
            `;
            
            container.appendChild(achievementElement);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type) {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    // –°—Ç–∏–ª–∏–∑—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notification.style.position = 'fixed';
    notification.style.top = '20px';
    notification.style.right = '20px';
    notification.style.padding = '10px 20px';
    notification.style.borderRadius = '5px';
    notification.style.color = '#fff';
    notification.style.zIndex = '10000';
    notification.style.opacity = '0';
    notification.style.transition = 'opacity 0.3s ease';
    
    if (type === 'success') {
        notification.style.background = 'var(--neon-green)';
        notification.style.boxShadow = '0 0 10px var(--neon-green)';
    } else {
        notification.style.background = 'var(--neon-pink)';
        notification.style.boxShadow = '0 0 10px var(--neon-pink)';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.body.appendChild(notification);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setTimeout(() => {
        notification.style.opacity = '1';
    }, 10);
    
    // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => {
            document.body.removeChild(notification);
        }, 300);
    }, 3000);
}